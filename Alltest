#!/usr/bin/bash

# ShellChecked on every push - Always ShellCheck your scripts!

# First some configs
# Assumes it's running from the root dir. of the repository 
if [ -z "${FOAM_LIBBIN}" ]; then
    echo "Please source an OpenFOAM version. Aborting..."
    echo "USAGE: ./Alltest [--no-serial|--no-parallel] [--report] [--html]"
    exit 1
fi

doSerial=true
doParallel=true
doReport=false
doHTML=false
for i in "$@"; do
    case $i in
        --no-serial)
            doSerial=false
            ;;
        --no-parallel)
            doParallel=false
            ;;
        --report)
            doReport=true
            ;;
        --html)
            doHTML=true
            ;;
        *)
            ;;
    esac
done

set -e
root=$PWD
export FOAM_FOAMUT="$root"
foamV=$(echo "${WM_PROJECT}$(test ! -z "${WM_FORK}" && echo '-'"${WM_FORK}")-${WM_PROJECT_VERSION}")

# If there is no lib${libName}.so, create a dummy one
dummyLibChecks="Pstream dynamicFvMesh"
for dummy in $dummyLibChecks; do
    if [ ! -f "${FOAM_LIBBIN}/lib${dummy}.so" ] &&
        [ ! -f "${FOAM_USER_LIBBIN}/lib${dummy}.so" ] &&
        [ ! -f "${FOAM_LIBBIN}/${FOAM_MPI}/lib${dummy}.so" ]; then
        echo '!<arch>' > "${FOAM_USER_LIBBIN}/lib${dummy}.so"
    fi
done

# libraries to test
libs=$(find -L tests/ -maxdepth 1 -mindepth 1 -type d)
# where to run OpenFOAM cases
caseRun=/dev/shm
# a timeout to prevent hanging processes (be CI friendly)
timeOut="${CATCH_TIMEOUT:-15}"

serialTests() {
    for lib in ${4}; do
        printf "\n\nRunning tests for lib %s, on %s case in serial...\n" "$lib" "${2}"
        echo "$root/$lib/testDriver"
        params=$(echo "${@:5} " | sed -e 's/--no-parallel//g' -e 's/--no-serial//g' -e 's/--report//g' -e 's/--html//g')
        libName=$(basename "$lib")
        consReport="${root}/reports/${libName}.xml"
        report=""
        case $doReport in
            (true) report="-s -r xml::out=${root}/reports/${libName}_${2}_serial.xml -d yes";;
        esac
        timeout "$timeOut" "$root"/"$lib"/testDriver --allow-running-no-tests $params "[serial][${2}]" \
            -n "$(basename "$lib")" $report \
            --- -case "${3}"
        locErr=$?
        err=$((err+locErr))
        case $doReport in
            (true) case $doHTML in
                (true) xsltproc --stringparam foamVersion "${foamV}" "$root"/style/catch2HTML.xslt \
                "$root"/reports/"$libName"_"${2}"_serial.xml \
                > "${root}/reports/${libName}_${2}_serial.html";;
                esac
                sed -n '/<Catch2TestRun/,/<\/Catch2TestRun>/{p;/<\/Catch2TestRun>/q}' "${root}/reports/${libName}_${caseName}_serial.xml" \
                | sed 's/<Catch2TestRun/<Catch2TestRun proc="-1"/g' >> "$consReport";;
        esac
    done
}

parallelTests(){
    decomposePar -force -case "${3}" > "${3}/log.decomposePar"
    err=$((err + $?))
    # run the case in parallel mode
    nProcs=$(grep -oP "numberOfSubdomains\s+\K\d+" "${3}"/system/decomposeParDict)
    params=$(echo "${@:5} " | sed -e 's/--no-parallel//g' -e 's/--no-serial//g' -e 's/--report//g' -e 's/--html//g')
    report=""
    case $doReport in
        (true) report="-s -r xml -d yes";;
    esac
    for lib in ${4}; do
        printf "\n\nRunning tests for lib %s, on %s case in parallel...\n" "$lib" "${2}"
        libName=$(basename "$lib")
        consReport="${root}/reports/${libName}.xml"
        logdir="reports/${libName}_${2}_parallel"
        logparams=""
        direct=""
        case $doReport in
            (true) logparams="-output-filename $logdir"
                direct="> /dev/null"
        esac
        eval timeout "$timeOut" mpirun $logparams -np "$nProcs" \
            "$root"/"$lib"/testDriver \
            --allow-running-no-tests \
            -n "$(basename "$lib")" $report \
            --rng-seed time $params "[parallel][${2}]" --- -parallel -case "${3}" $direct
        lerr=$?
        case $doReport in
            (true) if [ $lerr -ne 0  ];  then
                cat "${logdir}"/*/rank.*/stdout
            fi
        esac
        err=$((err + lerr))
        case $doReport in
            (true) for i in $(seq 0 $((nProcs-1))); do
                sed -i '/<\/Catch2TestRun>/q' "${logdir}"/1/rank."$i"/stdout
                case $doHTML in
                    (true) xsltproc --stringparam foamVersion "${foamV}" "$root"/style/catch2HTML.xslt \
                    "${logdir}"/1/rank."$i"/stdout > "${logdir}_${i}.html";
                esac
                sed -n '/<Catch2TestRun/,/<\/Catch2TestRun>/{p;/<\/Catch2TestRun>/q}' "${logdir}"/1/rank."$i"/stdout \
                    | sed 's/<Catch2TestRun/<Catch2TestRun proc="'"$i"'"/g' >> "$consReport"
            done;;
        esac
    done
}

# Compile catch
echo "Compiling Catch2 v3..."
if [ ! -f "$FOAM_USER_LIBBIN/catch2/lib/libCatch2.a" ]; then
    cd catch2
    mkdir -p build
    cd build
    cmake -DCMAKE_INSTALL_PREFIX="$FOAM_USER_LIBBIN"/catch2 .. > log.cmake 2>&1
    make -j"$(nproc)" > log.makeBuild 2>&1
    make install > log.makeInstall 2>&1
    cd - > /dev/null
    rm -rf build
    cd ..
fi

# 1st: compile tests
for lib in $libs; do
    consReport="${root}/reports/$(basename "$lib").xml"
    case $doReport in
        (true) echo '<?xml version="1.0" encoding="UTF-8"?>' > "$consReport"
        echo '<AllTestsForFile>' >> "$consReport";;
    esac

    cd "$lib"
    echo "Compiling $lib test driver..."
    if ! wmake > log.wmake 2>&1; then
        echo "Errors compiling $lib test driver, see $PWD/log.wmake for more information"
        exit 1
    else
        echo "Test driver for $lib has been compiled."
    fi
    cd - > /dev/null
done

# go back to the root of the repository
cd "$root"

# get setup to run tests
cases=$(find cases/ -maxdepth 1 -mindepth 1 -type d)
if [ -z "$cases" ]; then
    echo "No cases found to run tests"
    exit 1
fi
mkdir -p "$root"/reports

# run the tests, but do not exit until attempting everything
set +e
err=0
for ofCase in $cases; do
    caseName=$(basename "$ofCase")
    casePath=$caseRun/$caseName
    cp -r "$ofCase" "$caseRun"
    case $doSerial in
        (true)    serialTests "$err" "$caseName" "$casePath" "$libs"  "$@";;
    esac
    case $doParallel in
        (true)   parallelTests "$err" "$caseName" "$casePath" "$libs"  "$@";;
    esac
    rm -rf "$casePath"
done

case $doReport in
    (true) for lib in $libs; do
        consReport="${root}/reports/$(basename "$lib").xml"
        echo '</AllTestsForFile>' >> "$consReport"
        echo "Done writing consolidated XML report to $consReport"
    done;;
esac
    
# Cleanup
for dummy in $dummyLibChecks; do
    if [ -f "${FOAM_USER_LIBBIN}/lib${dummy}.so" ] && 
        tr '\n' ' ' < "${FOAM_USER_LIBBIN}/lib${dummy}.so" | grep -q '^!<arch> $'; then
        rm -rf "${FOAM_USER_LIBBIN}/lib${dummy}.so"
    fi
done

exit $err
